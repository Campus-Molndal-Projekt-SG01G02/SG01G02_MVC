name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Debug och Test steg
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore SG01G02_MVC.sln

      - name: Build for testing
        run: dotnet build SG01G02_MVC.sln --no-restore

      - name: Run tests
        run: dotnet test SG01G02_MVC.sln --no-build --verbosity normal

      # Logga in på Azure med AZURE_CREDENTIALS från GitHub Secrets
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Debug Azure Authentication
        run: |
          echo "Checking Azure authentication status..."
          az account show

          echo "Testing Key Vault access..."
          az keyvault list --query "[?name=='sg01g02kv606my1']" --output table

          echo "Listing available secrets (names only)..."
          az keyvault secret list --vault-name sg01g02kv606my1 --query "[].name" --output table

      # Hämta hemligheter från Azure Key Vault
      - name: Get secrets from Key Vault
        run: |
          VAULT_NAME="sg01g02kv606my1"

          # Hämta värden från Key Vault och sätt dem som miljövariabler
          echo "DOCKERHUB_USERNAME=$(az keyvault secret show --name 'dockerhub-username' --vault-name "$VAULT_NAME" --query 'value' -o tsv)" >> $GITHUB_ENV

          echo "DOCKERHUB_TOKEN=$(az keyvault secret show --name 'dockerhub-token' --vault-name "$VAULT_NAME" --query 'value' -o tsv)" >> $GITHUB_ENV

          echo "WATCHTOWER_TOKEN=$(az keyvault secret show --name 'watchtower-token' --vault-name "$VAULT_NAME" --query 'value' -o tsv)" >> $GITHUB_ENV

          echo "WATCHTOWER_ENDPOINT=http://$(az keyvault secret show --name 'reverse-proxy-ip' --vault-name "$VAULT_NAME" --query 'value' -o tsv):8080" >> $GITHUB_ENV

      # Verifiera att alla hemligheter hämtades
      - name: Verify secrets were retrieved
        run: |
          if [ -z "$DOCKERHUB_USERNAME" ]; then
            echo "Error: DOCKERHUB_USERNAME is not set"
            exit 1
          fi

          if [ -z "$DOCKERHUB_TOKEN" ]; then
            echo "Error: DOCKERHUB_TOKEN is not set"
            exit 1
          fi

          if [ -z "$WATCHTOWER_TOKEN" ]; then
            echo "Error: WATCHTOWER_TOKEN is not set"
            exit 1
          fi

          if [ -z "$WATCHTOWER_ENDPOINT" ]; then
            echo "Error: WATCHTOWER_ENDPOINT is not set"
            exit 1
          fi

          # Maskera hemligheterna i loggen men visa att de existerar
          echo "✅ DOCKERHUB_USERNAME exists"
          echo "✅ DOCKERHUB_TOKEN exists"
          echo "✅ WATCHTOWER_TOKEN exists"
          echo "✅ WATCHTOWER_ENDPOINT: $WATCHTOWER_ENDPOINT"

          echo "All required secrets were successfully retrieved from Key Vault!"

      # Bygg och publicera Docker-imagen
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/sg01g02mvc:latest

      # Notifiera Watchtower om att det finns en ny image
      - name: Notify Watchtower
        continue-on-error: true
        run: |
          echo "Sending notification to Watchtower at $WATCHTOWER_ENDPOINT"

          curl -v -X POST \
          -H "Authorization: Bearer ${{ env.WATCHTOWER_TOKEN }}" \
          -m 15 ${{ env.WATCHTOWER_ENDPOINT }}/v1/update

      - name: Watchtower Fallback Message
        if: steps.notify.outcome == 'failure'
        run: |
          echo "::warning::Kunde inte notifiera Watchtower direkt, men applikationen kommer ändå att uppdateras inom 30 sekunder via automatisk polling."
          echo "::notice::Docker-image har publicerats till DockerHub: ${{ env.DOCKERHUB_USERNAME }}/sg01g02mvc:latest"