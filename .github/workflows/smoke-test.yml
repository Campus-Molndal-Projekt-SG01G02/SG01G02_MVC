name: Smoke Test

on:
  # push:
  #   branches:
  #     - '**'
  #     - '!main'
  pull_request:
    branches: [ main ]

  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Type of deployment'
        required: true
        default: 'full'
        type: choice
        options:
          - full

# Concurrency control to prevent multiple runs of the same workflow
concurrency:
  group: smoke-${{ github.ref }}
#  cancel-in-progress: true

jobs:
  smoketest:
    name: Docker Smoke Test
    # runs-on: self-hosted
    runs-on: ubuntu-latest
    # Avoid duplicate runs by using smart conditional logic
    # This runs the test:
    # 1. On push ONLY if it is not in connection with a PR (direct push to branch)
    # 2. On PR events
    # 3. On manual execution
    if: >-
      (github.event_name == 'push' && github.head_ref == '') ||
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Update Dockerfile with in-memory support - after restore but before build
      - name: Add InMemory package to Dockerfile
        run: |
          echo "Modifying Dockerfile to add InMemory package support"

          # Add after dotnet restore in the build phase
          sed -i '/RUN dotnet restore SG01G02_MVC.sln/a # Add Entity Framework In-Memory for testing\nRUN dotnet add SG01G02_MVC.Web/SG01G02_MVC.Web.csproj package Microsoft.EntityFrameworkCore.InMemory' Dockerfile

          # Display the updated Dockerfile
          echo "Updated Dockerfile:"
          cat Dockerfile

      # Build the Docker image for testing
      - name: Build Docker image for testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: sg01g02mvc:smoketest
          build-args: |
            POSTGRES_CONNECTION_STRING=dummy-connection-string-for-testing
            KEY_VAULT_NAME=dummy-key-vault-for-testing

      # Run smoketest
      - name: Run Smoke Test
        id: smoketest
        run: |
          echo "Starting smoke test for Docker image..."

          # Run the Docker container in test mode with in-memory database
          CONTAINER_ID=$(docker run -d -p 8080:80 \
            -e ASPNETCORE_ENVIRONMENT=Testing \
            -e USE_IN_MEMORY_DB=true \
            -e ASPNETCORE_URLS="http://0.0.0.0:80" \
            sg01g02mvc:smoketest)

          # Wait for the container to start - increase to 30 seconds
          echo "Waiting for container to start..."
          sleep 30

          # Check if the container is running using docker inspect instead of docker ps | grep
          CONTAINER_STATE=$(docker inspect --format='{{.State.Status}}' "$CONTAINER_ID")

          if [ "$CONTAINER_STATE" != "running" ]; then
            echo "::error::Container failed to start! State: $CONTAINER_STATE"
            docker logs "$CONTAINER_ID" || echo "Could not retrieve logs"
            docker stop "$CONTAINER_ID" 2>/dev/null || true
            docker rm "$CONTAINER_ID" 2>/dev/null || true
            exit 1
          fi

          echo "Container is running with ID: $CONTAINER_ID"
          docker logs "$CONTAINER_ID"

          # Test the health check endpoint with retry mechanism
          echo "Testing health check endpoint..."
          MAX_RETRIES=5
          RETRY_COUNT=0
          HEALTH_STATUS=""

          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ -z "$HEALTH_STATUS" ]; do
            HEALTH_RESPONSE=$(curl -s http://localhost:8080/health || echo "Failed to connect")
            echo "Health check response: $HEALTH_RESPONSE"

            HEALTH_STATUS=$(echo $HEALTH_RESPONSE | grep -o '"status":"Healthy"' || echo "")

            if [ -n "$HEALTH_STATUS" ]; then
              echo "Health check is healthy! Continuing with tests."
              break
            else
              RETRY_COUNT=$((RETRY_COUNT+1))
              echo "Retry $RETRY_COUNT of $MAX_RETRIES..."
              sleep 5
            fi
          done

          if [ -z "$HEALTH_STATUS" ]; then
            echo "::error::Health check failed after $MAX_RETRIES retries, response: $HEALTH_RESPONSE"
            echo "::error::Container logs:"
            docker logs "$CONTAINER_ID"
            docker stop "$CONTAINER_ID"
            docker rm "$CONTAINER_ID"
            exit 1
          else
            echo "Health check successful with response: $HEALTH_RESPONSE"
          fi

          echo "Health check successful"

          # Test the login page
          echo "Testing login page..."
          LOGIN_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/Login/Index || echo "Failed")

          if [ "$LOGIN_CHECK" != "200" ]; then
            echo "::error::Login page check failed with status code: $LOGIN_CHECK"
            docker logs "$CONTAINER_ID"
            docker stop "$CONTAINER_ID"
            docker rm "$CONTAINER_ID"
            exit 1
          fi

          echo "Login page returned status code: $LOGIN_CHECK"

          # Test the home page
          echo "Testing home page..."
          HOME_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/ || echo "Failed")

          if [ "$HOME_CHECK" != "200" ]; then
            echo "::error::Home page check failed with status code: $HOME_CHECK"
            docker logs "$CONTAINER_ID"
            docker stop "$CONTAINER_ID"
            docker rm "$CONTAINER_ID"
            exit 1
          fi

          echo "Home page returned status code: $HOME_CHECK"

          # Clean up
          docker stop "$CONTAINER_ID"
          docker rm "$CONTAINER_ID"

          echo "Smoke test successful! Docker image works as expected."

          # Add results to workflow summary
          echo "## Smoke Test Results" >> $GITHUB_STEP_SUMMARY
          echo "The container started successfully" >> $GITHUB_STEP_SUMMARY
          echo "Health check returned 'Healthy'" >> $GITHUB_STEP_SUMMARY
          echo "The login page loaded successfully" >> $GITHUB_STEP_SUMMARY
          echo "The home page loaded successfully" >> $GITHUB_STEP_SUMMARY
          echo "The Docker image has been functionally tested and is ready for deployment!" >> $GITHUB_STEP_SUMMARY

      # Clean up after the test
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up Docker resources..."
          # Ta bort test-avbildningen
          docker rmi sg01g02mvc:smoketest || true

          # Check and stop any remaining containers
          CONTAINERS=$(docker ps -q --filter "ancestor=sg01g02mvc:smoketest")
          if [ ! -z "$CONTAINERS" ]; then
            echo "Stopping leftover containers: $CONTAINERS"
            docker stop $CONTAINERS
            docker rm $CONTAINERS
          fi