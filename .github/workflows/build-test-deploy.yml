name: Build and Deploy

on:
  push: # Trigger on push to main (merge).
    branches: [ main ]
    # paths-ignore:
    #   - '.github/workflows/**'

  # pull_request:
  #   branches: [ main ]
  #   paths-ignore:
  #     - '.github/workflows/**'

  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Type of deployment'
        required: true
        default: 'full'
        type: choice
        options:
          - full

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      # Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore SG01G02_MVC.sln

      - name: Build for testing
        run: dotnet build SG01G02_MVC.sln --no-restore

      # Continue workflow even if tests fail
      - name: Run tests
        id: tests
        # continue-on-error: true
        run: dotnet test SG01G02_MVC.sln --no-build --verbosity normal

      # Generate a summary report when tests fail
      - name: Generate Test Report
        if: steps.tests.outcome == 'failure'
        run: |
          echo "::warning::Tests have failed – see details below"

          echo '## Test Failures Summary' >> $GITHUB_STEP_SUMMARY
          echo 'The following issues need to be addressed:' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY

          echo '### LoginControllerTests' >> $GITHUB_STEP_SUMMARY
          echo '- **Login_ValidCredentials_ShouldRedirectToHome**: The action is now `async`. Update the test method signature to `async Task` and use `await`.' >> $GITHUB_STEP_SUMMARY
          echo '- **Login_InvalidCredentials_ShouldReturnViewWithError**: The action is now `async`. Update the test method signature to `async Task` and use `await`.' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY

          echo '### AdminControllerTests' >> $GITHUB_STEP_SUMMARY
          echo '- **Index_UnauthenticatedUser_ShouldRedirectToLogin**: Expected a `RedirectToActionResult` but got a `ViewResult`. Adjust the test or the implementation accordingly.' >> $GITHUB_STEP_SUMMARY

      # Report success if all tests pass
      - name: Report test success
        if: steps.tests.outcome == 'success'
        run: |
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "All tests passed successfully!" >> $GITHUB_STEP_SUMMARY

  deploy:
    needs: build_and_test
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      # Log in to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Verifiera Azure-autentisering
      - name: Verify Azure Authentication
        run: |
          echo "Checking Azure authentication status..."
          az account show --query "name" -o tsv

          echo "Testing Key Vault access..."
          # Använd Key Vault-namnet från GitHub Secrets
          az keyvault show --name ${{ secrets.AZURE_KEY_VAULT_NAME }} --query "name" -o tsv || \
            (echo "Error: Could not access Key Vault" && exit 1)

      - name: Debug connection string
        run: |
          MASKED_CONN=$(echo "$POSTGRES_CONNECTION_STRING" | sed 's/Password=[^;]*;/Password=***;/g')
          echo "POSTGRES_CONNECTION_STRING (masked): $MASKED_CONN"

      # Get secrets from Azure Key Vault
      - name: Get secrets from Key Vault
        run: |
          VAULT_NAME="${{ secrets.AZURE_KEY_VAULT_NAME }}"

          echo "DOCKERHUB_USERNAME=$(az keyvault secret show --name 'dockerhub-username' --vault-name "$VAULT_NAME" --query 'value' -o tsv)" >> $GITHUB_ENV

          echo "DOCKERHUB_TOKEN=$(az keyvault secret show --name 'dockerhub-token' --vault-name "$VAULT_NAME" --query 'value' -o tsv)" >> $GITHUB_ENV

          echo "WATCHTOWER_TOKEN=$(az keyvault secret show --name 'watchtower-token' --vault-name "$VAULT_NAME" --query 'value' -o tsv)" >> $GITHUB_ENV

          echo "WATCHTOWER_ENDPOINT=$(az keyvault secret show --name 'watchtower-endpoint' --vault-name "$VAULT_NAME" --query 'value' -o tsv)" >> $GITHUB_ENV

          echo "POSTGRES_CONNECTION_STRING=$(az keyvault secret show --name 'PostgresConnectionString' --vault-name "$VAULT_NAME" --query 'value' -o tsv)" >> $GITHUB_ENV

      # Verify secrets were retrieved
      - name: Verify secrets were retrieved
        run: |
          if [ -z "$DOCKERHUB_USERNAME" ]; then
            echo "Error: DOCKERHUB_USERNAME is not set"
            exit 1
          fi

          if [ -z "$DOCKERHUB_TOKEN" ]; then
            echo "Error: DOCKERHUB_TOKEN is not set"
            exit 1
          fi

          if [ -z "$WATCHTOWER_TOKEN" ]; then
            echo "Error: WATCHTOWER_TOKEN is not set"
            exit 1
          fi

          if [ -z "$WATCHTOWER_ENDPOINT" ]; then
            echo "Error: WATCHTOWER_ENDPOINT is not set"
            exit 1
          fi

          # Maskera hemligheterna i loggen men visa att de existerar
          echo "- DOCKERHUB_USERNAME exists"
          echo "- DOCKERHUB_TOKEN exists"
          echo "- WATCHTOWER_TOKEN exists"
          echo "- WATCHTOWER_ENDPOINT: $WATCHTOWER_ENDPOINT"
          echo "- POSTGRES_CONNECTION_STRING exists"

          echo "All required secrets were successfully retrieved from Key Vault!"

      # Build Docker image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      # Check and Apply Database Migrations
      - name: Check and Apply Database Migrations
        run: |
          echo "Checking for pending Entity Framework migrations..."

          # Set up correct .NET SDK version first (match your Dockerfile .NET version)
          dotnet --list-sdks
          echo "Current SDK version is not compatible. Setting up .NET 9.0..."

          # Use the same .NET version som i din setup .NET steg
          # Setup .NET (match this with your earlier .NET setup step)
          echo "Installing .NET 9.0 SDK..."
          wget https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.sh
          chmod +x dotnet-install.sh
          ./dotnet-install.sh --channel 9.0 --install-dir $HOME/.dotnet
          export PATH=$HOME/.dotnet:$PATH
          export DOTNET_ROOT=$HOME/.dotnet

          # Verify installed version
          dotnet --version

          # Install dotnet-ef CLI tool with specific version
          dotnet tool install --global dotnet-ef --version 9.0.4

          # Set project paths - FIXED FROM Data TO Infrastructure
          PROJECT_PATH="SG01G02_MVC.Infrastructure/SG01G02_MVC.Infrastructure.csproj"
          STARTUP_PROJECT="SG01G02_MVC.Web/SG01G02_MVC.Web.csproj"
          DBCONTEXT_NAME="AppDbContext"

          # Verify file paths exist
          echo "Verifying project files..."
          if [ ! -f "$PROJECT_PATH" ]; then
            echo "ERROR: Project file not found: $PROJECT_PATH"
            find . -name "*.csproj"
            exit 1
          fi

          if [ ! -f "$STARTUP_PROJECT" ]; then
            echo "ERROR: Startup project file not found: $STARTUP_PROJECT"
            find . -name "*.csproj"
            exit 1
          fi

          # Export connection string to variable for EF commands
          export ConnectionStrings__DefaultConnection="${{ env.POSTGRES_CONNECTION_STRING }}"

          # List migrations with detailed error output
          echo "Listing migrations with full verbose output:"
          dotnet ef migrations list --project "$PROJECT_PATH" --startup-project "$STARTUP_PROJECT" --context "$DBCONTEXT_NAME" --verbose

          # Continue with migration logic
          echo "Checking for pending migrations..."
          MIGRATION_OUTPUT=$(dotnet ef migrations list --project "$PROJECT_PATH" --startup-project "$STARTUP_PROJECT" --context "$DBCONTEXT_NAME" 2>&1)
          echo "$MIGRATION_OUTPUT"

          # Check if there are pending migrations
          if echo "$MIGRATION_OUTPUT" | grep -q "(Pending)"; then
            echo "Found pending migrations. Applying now..."

            # Apply migrations
            dotnet ef database update --project "$PROJECT_PATH" --startup-project "$STARTUP_PROJECT" --context "$DBCONTEXT_NAME" --verbose

            if [ $? -eq 0 ]; then
              echo "Migrations applied successfully."
              echo "## Database Migrations" >> $GITHUB_STEP_SUMMARY
              echo "✅ Pending migrations were successfully applied." >> $GITHUB_STEP_SUMMARY
            else
              echo "::error::Database migration failed! Deployment stopped."
              exit 1
            fi
          else
            echo "No pending migrations found. Database is up to date."
            echo "## Database Migrations" >> $GITHUB_STEP_SUMMARY
            echo "✅ Database is up to date. No migrations needed." >> $GITHUB_STEP_SUMMARY
          fi

      # Tagging and pushing Docker image if smoke test is successful
      - name: Tag and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/sg01g02mvc:latest
          build-args: |
            POSTGRES_CONNECTION_STRING=${{ env.POSTGRES_CONNECTION_STRING }}
            KEY_VAULT_NAME=${{ secrets.AZURE_KEY_VAULT_NAME }}

      # Wait for Docker image to be available
      - name: Wait for Docker image to be available
        run: |
          echo "Waiting 10 seconds for Docker image to be fully available..."
          sleep 10

      # Notify Watchtower if the image is successfully pushed
      - name: Notify Watchtower
        id: notify
        continue-on-error: false
        run: |
          echo "Sending notification to Watchtower at $WATCHTOWER_ENDPOINT"

          MAX_ATTEMPTS=3
          ATTEMPT=1
          SUCCESS=false

          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$SUCCESS" = "false" ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS..."

            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Authorization: Bearer ${{ env.WATCHTOWER_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"target": "app-container"}' \
              -m 15 "$WATCHTOWER_ENDPOINT")

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            if [[ $HTTP_CODE -ge 200 && $HTTP_CODE -lt 300 ]]; then
              echo "Watchtower notification successful: $BODY"
              SUCCESS=true
            else
              echo "Watchtower notification failed with code $HTTP_CODE: $BODY"
              if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                echo "Waiting 5 seconds before next attempt..."
                sleep 10
              fi
              ATTEMPT=$((ATTEMPT+1))
            fi
          done

          if [ "$SUCCESS" = "false" ]; then
            echo "All attempts to notify Watchtower failed."
            exit 1
          fi

      # Fallback message if Watchtower notification fails
      - name: Watchtower Fallback Message
        if: steps.notify.outcome == 'failure'
        run: |
          echo "::warning::Kunde inte notifiera Watchtower direkt, men applikationen kommer ändå att uppdateras inom 30 sekunder via automatisk polling."
          echo "::notice::Docker-image har publicerats till DockerHub: ${{ env.DOCKERHUB_USERNAME }}/sg01g02mvc:latest"